{"version":3,"sources":["../src/index.tsx"],"sourcesContent":["'use client';\r\n// deno-ts-ignore-file\r\n// deno-lint-ignore-file\r\n/* eslint-disable no-var */\r\n/* eslint-disable max-len */\r\n/* eslint-disable prefer-const */\r\nimport * as PropTypes from 'prop-types';\r\nimport * as React from 'react';\r\nimport * as NProgress from 'nprogress';\r\n\r\n// @deno-types =\"npm:preact@10.19.6\"\r\n\r\n// @deno-types =\"npm:nprogress@0.2.2\"\r\n\r\n// @deno-types =\"npm:@types/react@18.2.66\"\r\n\r\nexport type NextTopLoaderProps = {\r\n  /**\r\n   * Color for the TopLoader.\r\n   * @default \"#29d\"\r\n   */\r\n  color?: string;\r\n  /**\r\n   * The initial position for the TopLoader in percentage, 0.08 is 8%.\r\n   * @default 0.08\r\n   */\r\n  initialPosition?: number;\r\n  /**\r\n   * The increament delay speed in milliseconds.\r\n   * @default 200\r\n   */\r\n  crawlSpeed?: number;\r\n  /**\r\n   * The height for the TopLoader in pixels (px).\r\n   * @default 3\r\n   */\r\n  height?: number;\r\n  /**\r\n   * Auto increamenting behaviour for the TopLoader.\r\n   * @default true\r\n   */\r\n  crawl?: boolean;\r\n  /**\r\n   * To show spinner or not.\r\n   * @default true\r\n   */\r\n  showSpinner?: boolean;\r\n  /**\r\n   * Animation settings using easing (a CSS easing string).\r\n   * @default \"ease\"\r\n   */\r\n  easing?: string;\r\n  /**\r\n   * Animation speed in ms for the TopLoader.\r\n   * @default 200\r\n   */\r\n  speed?: number;\r\n  /**\r\n   * Defines a shadow for the TopLoader.\r\n   * @default \"0 0 10px ${color},0 0 5px ${color}\"\r\n   *\r\n   * @ you can disable it by setting it to `false`\r\n   */\r\n  shadow?: string | false;\r\n  /**\r\n   * Defines a template for the TopLoader.\r\n   * @default \"<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div>\r\n   * <div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>\"\r\n   */\r\n  template?: string;\r\n  /**\r\n   * Defines zIndex for the TopLoader.\r\n   * @default 1600\r\n   *\r\n   */\r\n  zIndex?: number;\r\n  /**\r\n   * To show the TopLoader at bottom.\r\n   * @default false\r\n   *\r\n   */\r\n  showAtBottom?: boolean;\r\n  /**\r\n   * To show the TopLoader for hash anchors.\r\n   * @default true\r\n   *\r\n   */\r\n  showForHashAnchor?: boolean;\r\n};\r\n\r\n/**\r\n *\r\n * NextTopLoader\r\n * @license MIT\r\n * @param {NextTopLoaderProps} props The properties to configure NextTopLoader\r\n * @returns {React.JSX.Element}\r\n *\r\n */\r\n\r\nconst NextTopLoader = ({\r\n  color: propColor,\r\n  height: propHeight,\r\n  showSpinner,\r\n  crawl,\r\n  crawlSpeed,\r\n  initialPosition,\r\n  easing,\r\n  speed,\r\n  shadow,\r\n  template,\r\n  zIndex = 1600,\r\n  showAtBottom = false,\r\n  showForHashAnchor = true,\r\n}: NextTopLoaderProps): React.JSX.Element => {\r\n  const defaultColor = '#29d';\r\n  const defaultHeight = 3;\r\n\r\n  const color = propColor ?? defaultColor;\r\n  const height = propHeight ?? defaultHeight;\r\n\r\n  // Any falsy (except undefined) will disable the shadow\r\n  const boxShadow =\r\n    !shadow && shadow !== undefined\r\n      ? ''\r\n      : shadow\r\n        ? `box-shadow:${shadow}`\r\n        : `box-shadow:0 0 10px ${color},0 0 5px ${color}`;\r\n\r\n  // Check if to show at bottom\r\n  const positionStyle = showAtBottom ? 'bottom: 0;' : 'top: 0;';\r\n  const spinnerPositionStyle = showAtBottom ? 'bottom: 15px;' : 'top: 15px;';\r\n\r\n  /**\r\n   * CSS Styles for the NextTopLoader\r\n   */\r\n  const styles = (\r\n    <style>\r\n      {`#nprogress{pointer-events:none}#nprogress .bar{background:${color};position:fixed;z-index:${zIndex};${positionStyle}left:0;width:100%;height:${height}px}#nprogress .peg{display:block;position:absolute;right:0;width:100px;height:100%;${boxShadow};opacity:1;-webkit-transform:rotate(3deg) translate(0px,-4px);-ms-transform:rotate(3deg) translate(0px,-4px);transform:rotate(3deg) translate(0px,-4px)}#nprogress .spinner{display:block;position:fixed;z-index:${zIndex};${spinnerPositionStyle}right:15px}#nprogress .spinner-icon{width:18px;height:18px;box-sizing:border-box;border:2px solid transparent;border-top-color:${color};border-left-color:${color};border-radius:50%;-webkit-animation:nprogress-spinner 400ms linear infinite;animation:nprogress-spinner 400ms linear infinite}.nprogress-custom-parent{overflow:hidden;position:relative}.nprogress-custom-parent #nprogress .bar,.nprogress-custom-parent #nprogress .spinner{position:absolute}@-webkit-keyframes nprogress-spinner{0%{-webkit-transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg)}}@keyframes nprogress-spinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}`}\r\n    </style>\r\n  );\r\n\r\n  /**\r\n   * Convert the url to Absolute URL based on the current window location.\r\n   * @param url {string}\r\n   * @returns {string}\r\n   */\r\n  const toAbsoluteURL = (url: string): string => {\r\n    return new URL(url, window.location.href).href;\r\n  };\r\n\r\n  /**\r\n   * Check if it is hash anchor or same page anchor\r\n   * @param currentUrl {string} Current Url Location\r\n   * @param newUrl {string} New Url detected with each anchor\r\n   * @returns {boolean}\r\n   */\r\n  const isHashAnchor = (currentUrl: string, newUrl: string): boolean => {\r\n    const current = new URL(toAbsoluteURL(currentUrl));\r\n    const next = new URL(toAbsoluteURL(newUrl));\r\n    return current.href.split('#')[0] === next.href.split('#')[0];\r\n  };\r\n\r\n  /**\r\n   * Check if it is Same Host name\r\n   * @param currentUrl {string} Current Url Location\r\n   * @param newUrl {string} New Url detected with each anchor\r\n   * @returns {boolean}\r\n   */\r\n  const isSameHostName = (currentUrl: string, newUrl: string): boolean => {\r\n    const current = new URL(toAbsoluteURL(currentUrl));\r\n    const next = new URL(toAbsoluteURL(newUrl));\r\n    return current.hostname.replace(/^www\\./, '') === next.hostname.replace(/^www\\./, '');\r\n  };\r\n\r\n  React.useEffect((): ReturnType<React.EffectCallback> => {\r\n    NProgress.configure({\r\n      showSpinner: showSpinner ?? true,\r\n      trickle: crawl ?? true,\r\n      trickleSpeed: crawlSpeed ?? 200,\r\n      minimum: initialPosition ?? 0.08,\r\n      easing: easing ?? 'ease',\r\n      speed: speed ?? 200,\r\n      template:\r\n        template ??\r\n        '<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>',\r\n    });\r\n\r\n    /**\r\n     * Check if the Current Url is same as New Url\r\n     * @param currentUrl {string}\r\n     * @param newUrl {string}\r\n     * @returns {boolean}\r\n     */\r\n    function isAnchorOfCurrentUrl(currentUrl: string, newUrl: string): boolean {\r\n      const currentUrlObj = new URL(currentUrl);\r\n      const newUrlObj = new URL(newUrl);\r\n      // Compare hostname, pathname, and search parameters\r\n      if (\r\n        currentUrlObj.hostname === newUrlObj.hostname &&\r\n        currentUrlObj.pathname === newUrlObj.pathname &&\r\n        currentUrlObj.search === newUrlObj.search\r\n      ) {\r\n        // Check if the new URL is just an anchor of the current URL page\r\n        const currentHash = currentUrlObj.hash;\r\n        const newHash = newUrlObj.hash;\r\n        return (\r\n          currentHash !== newHash && currentUrlObj.href.replace(currentHash, '') === newUrlObj.href.replace(newHash, '')\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // deno-lint-ignore no-var\r\n    var nProgressClass: NodeListOf<HTMLHtmlElement> = document.querySelectorAll('html');\r\n\r\n    const removeNProgressClass = (): void =>\r\n      nProgressClass.forEach((el: Element) => el.classList.remove('nprogress-busy'));\r\n\r\n    /**\r\n     * Find the closest anchor to trigger\r\n     * @param element {HTMLElement | null}\r\n     * @returns element {Element}\r\n     */\r\n    function findClosestAnchor(element: HTMLElement | null): HTMLAnchorElement | null {\r\n      while (element && element.tagName.toLowerCase() !== 'a') {\r\n        element = element.parentElement;\r\n      }\r\n      return element as HTMLAnchorElement;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param event {MouseEvent}\r\n     * @returns {void}\r\n     */\r\n    function handleClick(event: MouseEvent): void {\r\n      try {\r\n        const target = event.target as HTMLElement;\r\n        const anchor = findClosestAnchor(target);\r\n        const newUrl = anchor?.href;\r\n        const isNewTab = event.ctrlKey || event.metaKey;\r\n        if (newUrl) {\r\n          const currentUrl = window.location.href;\r\n          // const newUrl = (anchor as HTMLAnchorElement).href;\r\n          const isExternalLink = (anchor as HTMLAnchorElement).target === '_blank';\r\n\r\n          // Check for Special Schemes\r\n          const isSpecialScheme = ['tel:', 'mailto:', 'sms:', 'blob:', 'download:'].some((scheme) =>\r\n            newUrl.startsWith(scheme)\r\n          );\r\n\r\n          const notSameHost = !isSameHostName(window.location.href, anchor.href);\r\n          if (notSameHost) {\r\n            return;\r\n          }\r\n\r\n          const isAnchorOrHashAnchor =\r\n            isAnchorOfCurrentUrl(currentUrl, newUrl) || isHashAnchor(window.location.href, anchor.href);\r\n          if (!showForHashAnchor && isAnchorOrHashAnchor) {\r\n            return;\r\n          }\r\n\r\n          if (\r\n            newUrl === currentUrl ||\r\n            isExternalLink ||\r\n            isSpecialScheme ||\r\n            isAnchorOrHashAnchor ||\r\n            event.ctrlKey ||\r\n            event.metaKey ||\r\n            isNewTab ||\r\n            event.shiftKey ||\r\n            event.altKey ||\r\n            !toAbsoluteURL(anchor.href).startsWith('http')\r\n          ) {\r\n            NProgress.start();\r\n            NProgress.done();\r\n            removeNProgressClass();\r\n          } else {\r\n            NProgress.start();\r\n          }\r\n        }\r\n      } catch (err) {\r\n        // Log the error in development only!\r\n        // console.log('NextTopLoader error: ', err);\r\n        NProgress.start();\r\n        NProgress.done();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Complete TopLoader Progress on adding new entry to history stack\r\n     * @param {History}\r\n     * @returns {void}\r\n     */\r\n    ((history: History): void => {\r\n      const pushState = history.pushState;\r\n      history.pushState = (...args) => {\r\n        NProgress.done();\r\n        removeNProgressClass();\r\n        return pushState.apply(history, args);\r\n      };\r\n    })((window as Window).history);\r\n\r\n    /**\r\n     * Complete TopLoader Progress on replacing current entry of history stack\r\n     * @param {History}\r\n     * @returns {void}\r\n     */\r\n    ((history: History): void => {\r\n      const replaceState = history.replaceState;\r\n      history.replaceState = (...args) => {\r\n        NProgress.done();\r\n        removeNProgressClass();\r\n        return replaceState.apply(history, args);\r\n      };\r\n    })((window as Window).history);\r\n\r\n    function handlePageHide(): void {\r\n      NProgress.done();\r\n      removeNProgressClass();\r\n    }\r\n\r\n    /**\r\n     * Handle Browser Back and Forth Navigation\r\n     * @returns {void}\r\n     */\r\n    function handleBackAndForth(): void {\r\n      NProgress.done();\r\n    }\r\n\r\n    // Add the global click event listener\r\n    window.addEventListener('popstate', handleBackAndForth);\r\n    document.addEventListener('click', handleClick);\r\n    window.addEventListener('pagehide', handlePageHide);\r\n\r\n    // Clean up the global click event listener when the component is unmounted\r\n    return (): void => {\r\n      document.removeEventListener('click', handleClick);\r\n      window.removeEventListener('pagehide', handlePageHide);\r\n      window.removeEventListener('popstate', handleBackAndForth);\r\n    };\r\n  }, []);\r\n\r\n  return styles;\r\n};\r\nexport default NextTopLoader;\r\n\r\nNextTopLoader.propTypes = {\r\n  color: PropTypes.string,\r\n  height: PropTypes.number,\r\n  showSpinner: PropTypes.bool,\r\n  crawl: PropTypes.bool,\r\n  crawlSpeed: PropTypes.number,\r\n  initialPosition: PropTypes.number,\r\n  easing: PropTypes.string,\r\n  speed: PropTypes.number,\r\n  template: PropTypes.string,\r\n  shadow: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n  zIndex: PropTypes.number,\r\n  showAtBottom: PropTypes.bool,\r\n};\r\n"],"mappings":"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","names":["src_exports","__export","src_default","__toCommonJS","PropTypes","React","NProgress","NextTopLoader","__name","propColor","propHeight","showSpinner","crawl","crawlSpeed","initialPosition","easing","speed","shadow","template","zIndex","showAtBottom","showForHashAnchor","defaultColor","color","height","boxShadow","styles","toAbsoluteURL","url","isHashAnchor","currentUrl","newUrl","current","next","isSameHostName","isAnchorOfCurrentUrl","currentUrlObj","newUrlObj","currentHash","newHash","nProgressClass","removeNProgressClass","el","findClosestAnchor","element","handleClick","event","target","anchor","isNewTab","isExternalLink","isSpecialScheme","scheme","isAnchorOrHashAnchor","err","history","pushState","args","replaceState","handlePageHide","handleBackAndForth","src_default"]}